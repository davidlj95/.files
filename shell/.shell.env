# Configures the shell environment
#
# Aimed to be shell independent
#
# Tested in zsh (though this was started using bash)

# Constants
export USER_SDKM_DIR="$HOME/.sdkman"
export USER_APPS_DIR="$HOME/app"
export USER_LIBS_DIR="$HOME/lib"

# Helpers
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

prepend_to_path() {
  export PATH="$1:$PATH"
}

datauri2image() {
  sed 's/data:image\/png;base64,//g' | base64 -d
}

directory_exists_and_is_readable() {
  [ -d "$1" ] && [ -r "$1" ]
}

# Home bins
prepend_to_path "$HOME/bin"
prepend_to_path "$HOME/.local/bin"

# OS detection
is_mac_os() {
  [ "$(uname)" = "Darwin" ]
}

# Homebrew
get_homebrew_dir() {
  # Logic based on install script
  # https://github.com/Homebrew/install/blob/5e7f30635a945f475a557240f006973c81c71324/install.sh#L147
  if is_mac_os; then
    # https://github.com/Homebrew/install/blob/5e7f30635a945f475a557240f006973c81c71324/install.sh#L154-L155
    homebrew_mac_os_arm64_dir="/opt/homebrew"
    # https://github.com/Homebrew/install/blob/5e7f30635a945f475a557240f006973c81c71324/install.sh#L158-L159
    homebrew_mac_os_intel_dir="/usr/local/Homebrew"
    for homebrew_dir in "$homebrew_mac_os_arm64_dir" "$homebrew_mac_os_intel_dir"; do
      if directory_exists_and_is_readable "$homebrew_dir"; then
        echo "$homebrew_dir"
        break
      fi
    done
  else
    # https://github.com/Homebrew/install/blob/5e7f30635a945f475a557240f006973c81c71324/install.sh#L174-L175
    homebrew_linux_dir="/home/linuxbrew/.linuxbrew"
    if directory_exists_and_is_readable "$homebrew_linux_dir"; then
      echo "$homebrew_linux_dir"
    fi
  fi
}
HOMEBREW_DIR="$(get_homebrew_dir)"
[ -n "$HOMEBREW_DIR" ] && eval "$(/opt/homebrew/bin/brew shellenv)"

# Fuck
command_exists fuck && eval "$(thefuck --alias)"

# RVM: Ruby Version Manager
export RVM_COMMAND="rvm"
export RVM_HOME="$HOME/.rvm"
if [ -d "$RVM_HOME" ]; then
  prepend_to_path "$RVM_HOME/bin"
  # shellcheck disable=SC2154
  [[ -r $rvm_path/scripts/completion ]] && . "$rvm_path"/scripts/completion
fi

# Python: pyenv
if command_exists pyenv; then
  eval "$(pyenv init -)"
  # pyenv-virtualenv
  if pyenv virtualenv --version >/dev/null 2>&1; then
    eval "$(pyenv virtualenv-init -)"
  fi
fi

# SDKMan
[ -d "$USER_SDKM_DIR" ] && source "$USER_SDKM_DIR/bin/sdkman-init.sh"

# Java
## Via SDKMan
export SDKM_JAVA_CURRENT_DIR="$USER_SDKM_DIR/candidates/java/current"
if [ -d "$SDKM_JAVA_CURRENT_DIR" ]; then
  export JAVA_HOME="$SDKM_JAVA_CURRENT_DIR"
  prepend_to_path "$JAVA_HOME/bin"
fi
## Via java_home in MacOs
## https://medium.com/notes-for-geeks/java-home-and-java-home-on-macos-f246cab643bd
#if [ -x /usr/libexec/java_home ]; then
#	export JAVA_HOME="$(/usr/libexec/java_home)"
#fi

# JMeter
export JMETER_COMMAND="jmeter"
export JMETER_HOME="$USER_APPS_DIR/apache-jmeter/default"
[ -d "$JMETER_HOME" ] && prepend_to_path "$JMETER_HOME/bin"

# Gradle
export GRADLE_COMMAND="gradle"
export GRADLE_HOME="$USER_APPS_DIR/gradle/default"
[ -d "$GRADLE_HOME" ] && prepend_to_path "$GRADLE_HOME/bin"

# Defaults
export EDITOR=vim

# Customization
export POWERLINE_PROMPT="battery user_info scm python_venv ruby cwd"

# NVM: Node(JS) Version Manager
## MacOS w/ brew (tweaked for readability + brew --prefix)
## TODO: Just do this if actually installed
export NVM_DIR="$HOME/.nvm"
if [ -s "$(brew --prefix)/opt/nvm/nvm.sh" ]; then
  source "$(brew --prefix)/opt/nvm/nvm.sh" # This loads nvm
fi
if [ -s "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" ]; then
  source "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion
fi

# Hub: GitHub CLI tool
export HUB_COMMAND="hub"
if command_exists "$HUB_COMMAND"; then
  eval "$("$HUB_COMMAND" alias -s "$SHELL")"
fi

# Maven
export MAVEN_COMMAND="maven"
export MAVEN_HOME="$USER_APPS_DIR/apache-maven/default"
[ -d "$MAVEN_HOME" ] && prepend_to_path "$MAVEN_HOME/bin"

# Spring Roo
export ROO_COMMAND="roo"
export ROO_HOME="$USER_APPS_DIR/spring-roo/default"
if [ -d "$ROO_HOME" ]; then
  prepend_to_path "$ROO_HOME/bin"
  alias roo="roo.sh"
fi

# Spring CLI
export SPRING_COMMAND="spring"
export SPRING_HOME="$USER_SDKM_DIR/candidates/springboot/current"
if [ -d "$SPRING_HOME" ]; then
  prepend_to_path "$SPRING_HOME/bin"
fi

# CUDA: NVIDIA GPU API
export CUDA_COMMAND="cuda"
export CUDA_HOME="/usr/local/cuda"
if [ -d "$CUDA_HOME" ]; then
  prepend_to_path "$CUDA_HOME/bin"
  export LD_LIBRARY_PATH="$CUDA_HOME/lib64:$LD_LIBRARY_PATH"
fi

# NirCmd
export NIRCMD_COMMAND="nircmd.exe"
export NIRCMD_HOME="$USER_APPS_DIR/nircmd/default"
if [ -d "$NIRCMD_HOME" ]; then
  prepend_to_path "$NIRCMD_HOME"
fi

# Android
if is_mac_os; then
  export ANDROID_HOME=$HOME/Library/Android/Sdk
else
  export ANDROID_HOME=$HOME/Android/Sdk
fi
if [ -d "$ANDROID_HOME" ]; then
  prepend_to_path "${ANDROID_HOME}/emulator"
  prepend_to_path "${ANDROID_HOME}/platform-tools"
fi

# Flutter
## Classic install
if [ -d "$USER_APPS_DIR/flutter/current" ]; then
  export FLUTTER_ROOT="$USER_APPS_DIR/flutter/current"
  export FLUTTER_SDK="$FLUTTER_ROOT"
  prepend_to_path "$FLUTTER_ROOT/bin"
  prepend_to_path "$FLUTTER_ROOT/bin/cache/dart-sdk/bin"
fi
## FVM
FVM_PATH="$HOME/fvm/default/bin"
if [ -d "$FVM_PATH" ]; then
  prepend_to_path "$FVM_PATH"
  prepend_to_path "$FVM_PATH/cache/dart-sdk/bin"
fi

# Yarn
if [ -d "$HOME/.yarn" ]; then
  prepend_to_path "$HOME/.yarn/bin"
fi

# Golang
export GOPATH="$HOME/.go"

# Direnv
DIRENV_COMMAND="direnv"
if command_exists "$DIRENV_COMMAND"; then
  eval "$("$DIRENV_COMMAND" hook "$SHELL")"
fi

# Python packages (MacOS)
# TODO: If upgrading Python this may fail (OS update for instance)
PYTHON_USER_PACKAGES_HOME=$HOME/Library/Python/3.10
if [ -d "$PYTHON_USER_PACKAGES_HOME" ]; then
  prepend_to_path "$PYTHON_USER_PACKAGES_HOME/bin"
fi

# Terraform
TERRAFORM_HOME="/usr/local/opt/terraform@0.11"
if [ -d "$TERRAFORM_HOME" ]; then
  prepend_to_path "$TERRAFORM_HOME/bin"
fi

# Rust
export PATH="$HOME/.cargo/bin:$PATH"

# N
# Prefix is set to `$HOME/.n` instead of brew's formulae default: `$HOME/n`
# https://github.com/tj/n/blob/v9.1.0/README.md?plain=1#L81
# Which is better than default installation: `/usr/local`.
# https://github.com/tj/n/blob/v9.1.0/README.md?plain=1#L40
if command_exists n; then
  export N_PREFIX="$HOME/.n"
  prepend_to_path "$N_PREFIX/bin:$PATH"
fi

# Overrides specific to this machine
if [ -r "$HOME/.shell.overrides" ]; then
  source "$HOME/.shell.overrides"
fi
