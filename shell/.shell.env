#
# Configures the shell environment
#
# Shell independent. 
#
# Tested in bash & zsh
#

# Constants
export USER_SDKM_DIR="$HOME/.sdkman"
export USER_APPS_DIR="$HOME/app"
export USER_LIBS_DIR="$HOME/lib"

# Helpers
command_exists() {
	command -v "$1" > /dev/null 2>&1
}

prepend_to_path() {
	export PATH="$1:$PATH"
}

datauri2image() {
    sed 's/data:image\/png;base64,//g' | base64 -d
}

# Home bins
prepend_to_path "$HOME/bin"
prepend_to_path "$HOME/.local/bin"

# OS detection
is_mac_os() {
	[ "$(uname)" = "Darwin" ]
}

# Environment
# This was needed when we installed GPG on MacOS using brew
export LC_NUMERIC=en_US.UTF-8
export LC_TIME=en_US.UTF-8
export LC_COLLATE=en_US.UTF-8
export LC_MONETARY=en_US.UTF-8
export LC_MESSAGES=en_US.UTF-8
# https://stackoverflow.com/a/42265848/3263250
OUR_TTY="$(tty)"
export GPG_TTY="$OUR_TTY"

# Fuck
if command_exists "fuck"; then
	eval "$(thefuck --alias)"
fi

# FASD
#if command_exists "fasd"; then
#	eval "$(fasd --init auto)"
#fi

# RVM: Ruby Version Manager
export RVM_COMMAND="rvm"
export RVM_HOME="$HOME/.rvm"
[ -d "$RVM_HOME" ] && prepend_to_path "$RVM_HOME/bin"

# PyENV
export PYENV_COMMAND="pyenv"
export PYENV_HOME="$HOME/.pyenv"
if [ -d "$PYENV_HOME" ]; then
	prepend_to_path "$PYENV_HOME/bin"
	#eval "$(pyenv init -)"
	#eval "$(pyenv virtualenv-init -)"
fi

# SDKMan
[ -d "$USER_SDKM_DIR" ] && source "$USER_SDKM_DIR/bin/sdkman-init.sh"

# Java
## Via SDKMan
export SDKM_JAVA_CURRENT_DIR="$USER_SDKM_DIR/candidates/java/current"
if [ -d "$SDKM_JAVA_CURRENT_DIR" ]; then
	export JAVA_HOME="$SDKM_JAVA_CURRENT_DIR"
	prepend_to_path "$JAVA_HOME/bin"
fi
## Via java_home in MacOs
## https://medium.com/notes-for-geeks/java-home-and-java-home-on-macos-f246cab643bd
if [ -x /usr/libexec/java_home ]; then
	export JAVA_HOME="$(/usr/libexec/java_home)"
fi


# JMeter
export JMETER_COMMAND="jmeter"
export JMETER_HOME="$USER_APPS_DIR/apache-jmeter/default"
[ -d "$JMETER_HOME" ] && prepend_to_path "$JMETER_HOME/bin"

# Gradle
export GRADLE_COMMAND="gradle"
export GRADLE_HOME="$USER_APPS_DIR/gradle/default"
[ -d "$GRADLE_HOME" ] && prepend_to_path "$GRADLE_HOME/bin"

# Defaults
export EDITOR=vim

# Customization
export POWERLINE_PROMPT="battery user_info scm python_venv ruby cwd"

# NVM: Node(JS) Version Manager
#export NVM_COMMAND="nvm"
#export NVM_HOME="$HOME/.nvm"
# # Arch Linux
#if [ -d "$NVM_HOME" ]; then
#	[ -s "$NVM_HOME/nvm.sh" ] && \. "$NVM_HOME/nvm.sh"  # This loads nvm
#fi
# # MacOS
export NVM_DIR="$HOME/.nvm"
if [ -s "$(brew --prefix)/opt/nvm/nvm.sh" ]; then
    source "$(brew --prefix)/opt/nvm/nvm.sh" # This loads nvm
fi
#if [ -r "/usr/share/nvm/init-nvm.sh" ]; then
#       source "/usr/share/nvm/init-nvm.sh"
#fi

# Hub: GitHub CLI tool
export HUB_COMMAND="hub"
if command_exists "$HUB_COMMAND"; then
	eval "$("$HUB_COMMAND" alias -s "$SHELL")"
fi

# Maven
export MAVEN_COMMAND="maven"
export MAVEN_HOME="$USER_APPS_DIR/apache-maven/default"
[ -d "$MAVEN_HOME" ] && prepend_to_path "$MAVEN_HOME/bin"

# Spring Roo
export ROO_COMMAND="roo"
export ROO_HOME="$USER_APPS_DIR/spring-roo/default"
if [ -d "$ROO_HOME" ]; then
	prepend_to_path "$ROO_HOME/bin"
	alias roo="roo.sh"
fi

# Spring CLI
export SPRING_COMMAND="spring"
export SPRING_HOME="$USER_SDKM_DIR/candidates/springboot/current"
if [ -d "$SPRING_HOME" ]; then
	prepend_to_path "$SPRING_HOME/bin"
fi

# CUDA: NVIDIA GPU API
export CUDA_COMMAND="cuda"
export CUDA_HOME="/usr/local/cuda"
if [ -d "$CUDA_HOME" ]; then
	prepend_to_path "$CUDA_HOME/bin"
	export LD_LIBRARY_PATH="$CUDA_HOME/lib64:$LD_LIBRARY_PATH"
fi

# NirCmd
export NIRCMD_COMMAND="nircmd.exe"
export NIRCMD_HOME="$USER_APPS_DIR/nircmd/default"
if [ -d "$NIRCMD_HOME" ]; then
	prepend_to_path "$NIRCMD_HOME"
fi

# Android
if is_mac_os; then
    export ANDROID_HOME=$HOME/Library/Android/Sdk
else
    export ANDROID_HOME=$HOME/Android/Sdk
fi
if [ -d "$ANDROID_HOME" ]; then
    prepend_to_path "${ANDROID_HOME}/emulator"
    prepend_to_path "${ANDROID_HOME}/platform-tools"
fi

# Ruby Gems
if [ -d "$HOME/.gem/ruby/2.6.0/bin" ]; then
    prepend_to_path "$HOME/.gem/ruby/2.6.0/bin"
fi

# Flutter
## Classic install
if [ -d "$USER_APPS_DIR/flutter/current" ]; then
    export FLUTTER_ROOT="$USER_APPS_DIR/flutter/current"
    export FLUTTER_SDK="$FLUTTER_ROOT"
    prepend_to_path "$FLUTTER_ROOT/bin"
    prepend_to_path "$FLUTTER_ROOT/bin/cache/dart-sdk/bin"
fi
## FVM
FVM_PATH="$HOME/fvm/default/bin"
if [ -d  "$FVM_PATH" ]; then
    prepend_to_path "$FVM_PATH"
    prepend_to_path "$FVM_PATH/cache/dart-sdk/bin"
fi

# Yarn
if [ -d "$HOME/.yarn" ]; then
    prepend_to_path "$HOME/.yarn/bin"
fi

# Golang
export GOPATH="$HOME/.go"

# Direnv
DIRENV_COMMAND="direnv"
if command_exists "$DIRENV_COMMAND"; then
    eval "$("$DIRENV_COMMAND" hook "$SHELL")"
fi

# Python packages (MacOS)
# TODO: If upgrading Python this may fail (OS update for instance)
PYTHON_USER_PACKAGES_HOME=$HOME/Library/Python/3.9
if [ -d "$PYTHON_USER_PACKAGES_HOME" ]; then
    prepend_to_path "$PYTHON_USER_PACKAGES_HOME/bin"
fi

# Terraform
TERRAFORM_HOME="/usr/local/opt/terraform@0.11"
if [ -d "$TERRAFORM_HOME" ]; then
    prepend_to_path "$TERRAFORM_HOME/bin"
fi

# Rust
export PATH="$HOME/.cargo/bin:$PATH"
